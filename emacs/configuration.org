#+STARTUP: content
* Before it all
#+BEGIN_SRC emacs-lisp
(eval-and-compile
  (setq load-prefer-newer t
          package-user-dir "~/.emacs.d/elpa"
          package--init-file-ensured t
          package-enable-at-startup nil)

    (unless (file-directory-p package-user-dir)
        (make-directory package-user-dir t))

      (setq load-path (append load-path (directory-files package-user-dir t "^[^.]" t))))

(eval-when-compile
  (require 'package)
  ;; tells emacs not to load any packages before starting up
  ;; the following lines tell emacs where on the internet to look up
  ;; for new packages.
  (setq package-archives '(("melpa"     . "https://melpa.org/packages/")
                             ("elpa"      . "https://elpa.gnu.org/packages/")
                             ("repo-org"  . "https://orgmode.org/elpa/")))
  ;; (package-initialize)
  (unless package--initialized (package-initialize t))

  ;; Bootstrap `use-package'
  (unless (package-installed-p 'use-package) ; unless it is already installed
          (package-refresh-contents) ; updage packages archive
          (package-install 'use-package)) ; and install the most recent version of use-package
  ;; Bootstrap `general'
  (unless (package-installed-p 'general) ; unless it is already installed
          (package-refresh-contents) ; updage packages archive
          (package-install 'general)) ; and install the most recent version of general

(eval-when-compile
  (require 'use-package)
  (require 'general))

(setq use-package-always-ensure t))
#+END_SRC

* Interface Tweaks
** Disabling UI-Elements
Disables UI-Elements to enforce use of keyboard
#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
(toggle-scroll-bar -1)
(tool-bar-mode -1)
#+END_SRC
** Font
   Adjust the font
   #+BEGIN_SRC emacs-lisp
   (set-frame-font "Source Code Pro-12" nil t)
   #+END_SRC
** Dialogs and Screens
First screen will be Scratch-Blog
#+BEGIN_SRC emacs-lisp
   (setq inhibit-splash-screen t)
#+END_SRC

For easier up and down jumping in evil-mode
#+BEGIN_SRC emacs-lisp
(setq display-line-numbers-type 'relative)
(setq display-line-numbers-mode t)
#+END_SRC
** Theme
#+BEGIN_SRC emacs-lisp
(use-package doom-themes
  :config
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled
  (load-theme 'doom-one t)

  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)

  ;; Enable custom neotree theme (all-the-icons must be installed!)
  (doom-themes-neotree-config)
  ;; or for treemacs users
  (setq doom-themes-treemacs-theme "doom-colors") ; use the colorful treemacs theme
  (doom-themes-treemacs-config)

  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))
#+END_SRC
** Powerline bar
#+BEGIN_SRC emacs-lisp
(use-package doom-modeline
  :ensure t
  :ensure all-the-icons
  :custom
    (doom-modeline-icon (display-graphic-p))
    (doom-modeline-modal-icon t)
    (doom-modeline-major-mode-color-icon t)
    (doom-modeline-major-mode-icon t)
    (doom-modeline-buffer-state-icon t)
    (doom-modeline-height 20)
    (doom-modeline-bar-width 0)
    (doom-modeline-buffer-modification-icon nil) ;; otherwise height is messed up for me
  :config
    (setq evil-normal-state-tag   (propertize "[Normal]" 'face '(:foreground "green"))
      evil-emacs-state-tag    (propertize "[Emacs]" 'face '(:foreground "orange"))
      evil-insert-state-tag   (propertize "[Insert]" 'face '(:foreground "purple"))
      evil-motion-state-tag   (propertize "[Motion]" 'face '((:background "blue") :foreground "white"))
      evil-visual-state-tag   (propertize "[Visual]" 'face '((:background "grey80" :foreground "black")))
      evil-operator-state-tag (propertize "[Operator]" 'face '((:background "purple"))))
;; Define your custom doom-modeline
  (doom-modeline-def-segment evil-state
  "The current evil state.  Requires `evil-mode' to be enabled."
  (when (bound-and-true-p evil-local-mode)
    (s-trim-right (evil-state-property evil-state :tag t))))

  (doom-modeline-def-modeline 'my-simple-line
    '(bar evil-state matches buffer-info remote-host buffer-position parrot selection-info)
    '(misc-info minor-modes input-method buffer-encoding major-mode process vcs checker))

  ;; Add to `doom-modeline-mode-hook` or other hooks
  (defun setup-custom-doom-modeline ()
     (doom-modeline-set-modeline 'my-simple-line 'default))
  (add-hook 'doom-modeline-mode-hook 'setup-custom-doom-modeline)

  :hook
	  (after-init . doom-modeline-mode))
#+END_SRC
* Basic Packages
** Diminish
#+begin_src emacs-lisp
(use-package diminish
  :config
  (diminish 'eldoc-mode "")
  (diminish 'buffer-face-mode "")
  (diminish 'undo-tree-mode " Ⓤ"))
#+end_src
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :config (which-key-mode 1))
#+END_SRC
** Which-Key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :config (which-key-mode 1))
#+END_SRC
** General
#+begin_src emacs-lisp
  (use-package general
    :config (general-override-mode 1)
    (defun find-user-init-file ()
      "Edit the `user-init-file', in same window."
      (interactive)
      (find-file user-init-file))

    (defun load-user-init-file ()
      "Load the `user-init-file', in same window."
      (interactive)
      (load-file user-init-file))

    (general-create-definer tyrant-def
      :states '(normal visual insert motion emacs)
      :prefix "SPC"
      :non-normal-prefix "C-SPC")

    (general-create-definer despot-def
      :states '(normal insert)
      :prefix "SPC"
      :non-normal-prefix "C-SPC")

   (general-define-key :keymaps 'key-translation-map
			"ESC" (kbd "C-g"))

  (general-def "C-x x" 'eval-defun)

  (tyrant-def
    ""     nil
    "c"   (general-simulate-key "C-c")
    "h"   (general-simulate-key "C-h")
    "u"   (general-simulate-key "C-u")
    "x"   (general-simulate-key "C-x")
    "a"   '(:ignore t :which-key "Apps")
    ;; Package manager
    "lp"  'list-packages
    ;; Window operations
    "w"   '(:ignore t :which-key "Window")
    "wm" 'maximize-window
    "wh" 'split-window-horizontally ;; TODO evil-split because moves cursor is nice - probably both h and H
    "wv" 'split-window-vertically
    "wm" 'maximize-window
    "wu" 'winner-undo
    "ww" 'other-window
    "wd" 'delete-window
    "wD" 'delete-other-windows
    ;; file
    "f"   '(:ignore t :wk "File")
    "fs"  '(save-buffer :wk "safe")
    "fd"  '(:ignore t :wk "Dotfile")
    "fdr" '(load-user-init-file :wk "reload")
    "fdo" '(find-user-init-file :wk "open ⚷")
    ;; Buffer
    "b" '(:ignore t :which-key "Buffer")
    ;; Goto
    "g" '(:ignore t :which-key "Goto")
))
#+end_src
* Now General and diminish are available for use-package
The :general keyword is a part of this package not a part of use-package, so you need to load general before using the keyword.
Form noctuid in [[https://github.com/noctuid/general.el/issues/91#issuecomment-401544514][Github]]
** Helm
Helm stuff
#+BEGIN_SRC emacs-lisp
(use-package helm
    :hook (after-init . helm-mode)
    :config (require 'helm-config)
    :commands (helm-mini
               helm-find-files
               helm-recentf
               helm-locate
               helm-M-x
               helm-flyspell-correct)
    :bind (:map helm-map
                ([tab] . helm-execute-persistent-action))
    :general
      (tyrant-def
        "SPC" 'helm-M-x
        "bl"  'helm-buffers-list
        "ff"  'helm-find-files
        "fr"  'helm-recentf
        "fL"  'helm-locate))
#+END_SRC
** Helm-Org
Install helm-org to find files with tags
#+BEGIN_SRC emacs-lisp
(use-package helm-org)
#+END_SRC
** Evil-Magit
#+begin_src emacs-lisp
(use-package evil-magit
    :general
      (tyrant-def
        "am" 'magit-status))
#+end_src
** Switching easily windows
#+BEGIN_SRC emacs-lisp
(use-package winum
  :after general which-key
  :defer t
  :hook (after-init . winum-mode)
  :general
    (tyrant-def
      "w1"  'winum-select-window-1
      "w2"  'winum-select-window-2
      "w3"  'winum-select-window-3
      "w4"  'winum-select-window-4))
#+END_SRC
** Haskell
Stuff for haskell development
#+BEGIN_SRC emacs-lisp
(use-package haskell-mode)
(require 'haskell-interactive-mode)
(require 'haskell-process)
(add-hook 'haskell-mode-hook 'interactive-haskell-mode)
#+END_SRC
** Parentheses
Rainbow-delimiters is a "rainbow parentheses"-like mode which highlights delimiters such as parentheses, brackets or braces according to their depth. Each successive level is highlighted in a different color. This makes it easy to spot matching delimiters, orient yourself in the code, and tell which statements are at a given depth.
#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))
#+END_SRC

** Org-Mode
*** Package
#+BEGIN_SRC emacs-lisp
(use-package org
  :defer t
  :mode ("\\.org\\'" . org-mode)
  :ensure org-plus-contrib
  :init
    (defun my-org-mode-hooks ()
      (visual-line-mode)
      (display-line-numbers-mode t)
      (flyspell-mode)
      (outline-minor-mode)
      (electric-pair-mode))
   (add-hook 'org-mode-hook '(lambda ()
                             (visual-line-mode)
                             (org-indent-mode)))
   :general
     (despot-def org-mode-map
       "e"   'org-export-dispatch
       "t"   'org-hide-block-toggle
       "x"   'org-babel-execute-src-block
       "X"   'org-babel-execute-and-next
       "d"   'org-babel-remove-result
	     "s"   'org-insert-structure-template))
#+END_SRC
*** Adjust Agenda path
#+BEGIN_SRC emacs-lisp
(setq org-agenda-files '("~/Org"))
#+END_SRC
** Evil
*** package
  #+BEGIN_SRC emacs-lisp
  (use-package evil
    :hook (after-init . evil-mode)
    :config (evil-set-initial-state 'shell-mode 'normal)
    (evil-set-initial-state 'doc-view-mode 'normal)
    (evil-set-initial-state 'package-menu-mode 'normal)
    (evil-set-initial-state 'biblio-selection-mode 'motion)
    (setq evil-insert-state-cursor '((bar . 5) "yellow")
      evil-normal-state-cursor '(box "purple"))
    (setq doc-view-continuous t)
    :general
    (tyrant-def
      "wh"  'evil-window-left
      "w1"  'winum-select-window-1
      "wl"  'evil-window-right
      "wj"  'evil-window-down
      "wk"  'evil-window-up
      "bN"  'evil-buffer-new
      "bn"  'evil-next-buffer
      "bp"  'evil-prev-buffer))
   #+END_SRC
   Behaves like VIM :)
*** Undo
   The default undo behavior in Evil is too coarse-grained because it considers anything taking place between entering insert mode and leaving it as one edit operation. When you enter a whole paragraph of text during one insert and then execute undo, the whole paragraph is removed. In contrast to that, Vim starts a new undo unit whenever you move the cursor in insert mode by means other than entering text.

   Like in Doom i use undo-fu https://github.com/hlissner/doom-emacs/issues/2339#issuecomment-610706411
"undo-tree prematurely and unpredictably truncates undo history. This is better than total data corruption, but still makes me nervous about undoing beyond ~5 steps. Undo-fu doesn't appear to suffer the same problem. We sacrifice the tree-visualizer, but at least we get history persistence with undo-fu-session."
   #+BEGIN_SRC emacs-lisp
   (use-package undo-fu
     :ensure t
     :config
       (global-undo-tree-mode -1)
     :general
     (tyrant-def
      "u"  'undo-fu-only-undo
      "U"  'undo-fu-only-redo))
   #+END_SRC
** Jumping around with avy
  #+BEGIN_SRC emacs-lisp
  (use-package avy
  :general
   (tyrant-def
    "g SPC" 'evil-avy-goto-char-timer))
  #+END_SRC
** IMenu
  #+BEGIN_SRC emacs-lisp
  (use-package imenu-list
    :config
    (setq imenu-list-auto-resize t)
    (setq imenu-list-focus-after-activation t))
  #+END_SRC
** Hooks
*** No Trailing whitespaces
I never want whitespace at the end of lines. Remove it on save.
#+BEGIN_SRC emacs-lisp
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC
