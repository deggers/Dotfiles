#+STARTUP: content
* Before it all
#+BEGIN_SRC emacs-lisp
(eval-and-compile
  (setq load-prefer-newer t
          package-user-dir "~/.emacs.d/elpa"
          package--init-file-ensured t
          package-enable-at-startup nil)

    (unless (file-directory-p package-user-dir)
        (make-directory package-user-dir t))

      (setq load-path (append load-path (directory-files package-user-dir t "^[^.]" t))))

(eval-when-compile
  (require 'package)
  ;; tells emacs not to load any packages before starting up
  ;; the following lines tell emacs where on the internet to look up
  ;; for new packages.
  (setq package-archives '(("melpa"     . "https://melpa.org/packages/")
                             ("elpa"      . "https://elpa.gnu.org/packages/")
                             ("repo-org"  . "https://orgmode.org/elpa/")))
  ;; (package-initialize)
  (unless package--initialized (package-initialize t))

  ;; Bootstrap `use-package'
  (unless (package-installed-p 'use-package) ; unless it is already installed
          (package-refresh-contents) ; updage packages archive
          (package-install 'use-package)) ; and install the most recent version of use-package
  ;; Bootstrap `general'
  (unless (package-installed-p 'general) ; unless it is already installed
          (package-refresh-contents) ; updage packages archive
          (package-install 'general)) ; and install the most recent version of general

(eval-when-compile
  (require 'use-package)
  (require 'general))

(setq use-package-always-ensure t))
#+END_SRC

* Interface Tweaks
** Disabling UI-Elements
Disables UI-Elements to enforce use of keyboard
#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
(toggle-scroll-bar -1)
(tool-bar-mode -1)
#+END_SRC
** Autosave and Backups
Don’t clutter up file tree with Emacs’ backup files, save them to the system’s “temp” directory:
#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist '(("." . "~/.emacs.d/backup"))
    backup-by-copying t    ; Don't delink hardlinks
    version-control t      ; Use version numbers on backups
    delete-old-versions t  ; Automatically delete excess backups
    kept-new-versions 20   ; how many of the newest versions to keep
    kept-old-versions 5    ; and how many of the old
    )
#+END_SRC
** Font
   Adjust the font
   #+BEGIN_SRC emacs-lisp
   (set-frame-font "Source Code Pro-12" nil t)
   #+END_SRC
** Line numbers
For easier up and down jumping in evil-mode
#+BEGIN_SRC emacs-lisp
(setq-default display-line-numbers 'visual
              display-line-numbers-type 'relative
              display-line-numbers-width 4
              display-line-numbers-widen t)
(set-face-attribute 'line-number-current-line nil
                    :background "white" :foreground "black")
#+END_SRC
** Dialogs and Screens
First screen will be Scratch-Blog
#+BEGIN_SRC emacs-lisp
   (setq inhibit-splash-screen t)
#+END_SRC
** Theme
#+BEGIN_SRC emacs-lisp
  (use-package modus-vivendi-theme
  :config
  (load-theme 'modus-vivendi t))

  (use-package modus-operandi-theme)

  (defun modus-themes-toggle ()
    "Toggle between `modus-operandi' and `modus-vivendi' themes."
    (interactive)
    (if (eq (car custom-enabled-themes) 'modus-operandi)
        (progn
          (disable-theme 'modus-operandi)
          (load-theme 'modus-vivendi t))
      (disable-theme 'modus-vivendi)
      (load-theme 'modus-operandi t)))
#+END_SRC
** Powerline bar
#+BEGIN_SRC emacs-lisp
(use-package powerline
  :config
   (setq-default mode-line-position "")) ;; I use line-number-mode instead
#+END_SRC
* Basic Packages
** Diminish
#+begin_src emacs-lisp
(use-package diminish
  :init
  (diminish 'eldoc-mode "")
  (diminish 'org-indent-mode "")
  (diminish 'buffer-face-mode "")
  (diminish 'undo-tree-mode " Ⓤ"))
#+end_src
** Which-Key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :config (which-key-mode 1))
#+END_SRC
** General
#+begin_src emacs-lisp
   (use-package general
     :config (general-override-mode 1)
     (defun find-user-init-file ()
       "Edit the `user-init-file', in same window."
       (interactive)
       (find-file user-init-file))

     (defun load-user-init-file ()
       "Load the `user-init-file', in same window."
       (interactive)
       (load-file user-init-file))

     (general-create-definer tyrant-def
       :states '(normal visual insert motion emacs)
       :prefix "SPC"
       :non-normal-prefix "C-SPC")

     (general-create-definer despot-def
       :states '(normal insert)
       :prefix "SPC"
       :non-normal-prefix "C-SPC")

    (general-define-key :keymaps 'key-translation-map
                         "ESC" (kbd "C-g"))

   (general-def "C-x x" 'eval-defun)

   (tyrant-def
     ""     nil
     "c"   (general-simulate-key "C-c")
     "h"   (general-simulate-key "C-h")
     "u"   (general-simulate-key "C-u")
     "x"   (general-simulate-key "C-x")
     ;; Package manager
     "lp"  'list-packages
     ;; Window operations
     "w"   '(:ignore t :which-key "Window")
     "wm" 'maximize-window
     "wh" 'split-window-horizontally ;; TODO evil-split because moves cursor is nice - probably both h and H
     "wv" 'split-window-vertically
     "wm" 'maximize-window
     "wu" 'winner-undo
     "ww" 'other-window
     "wd" 'delete-window
     "wD" 'delete-other-windows
     ;; file
     "f"   '(:ignore t :wk "File")
     "fs"  '(save-buffer :wk "safe")
     "fd"  '(:ignore t :wk "Dotfile")
     "fdr" '(load-user-init-file :wk "reload")
     "fdo" '(find-user-init-file :wk "open ⚷")
     ;; Buffer
     "b" '(:ignore t :which-key "Buffer")
     ;; Toggle
     "t" '(:ignore t :wk "Toggle")
     ;; Git
     "g" '(:ignore t :wk "Git")
  ))
#+end_src
* Now General and diminish are available for use-package
The :general keyword is a part of this package not a part of use-package, so you need to load general before using the keyword.
Form noctuid in [[https://github.com/noctuid/general.el/issues/91#issuecomment-401544514][Github]]
** Helm
Helm stuff
#+BEGIN_SRC emacs-lisp
(use-package helm
    :hook (after-init . helm-mode)
    :config (require 'helm-config)
    :commands (helm-mini
               helm-find-files
               helm-recentf
               helm-locate
               helm-M-x
               helm-flyspell-correct)
    :bind (:map helm-map
                ([tab] . helm-execute-persistent-action))
    :general
      (tyrant-def
        "SPC" 'helm-M-x
        "bl"  'helm-buffers-list
        "ff"  'helm-find-files
        "fr"  'helm-recentf
        "fL"  'helm-locate))
#+END_SRC
** Helm-Org
Install helm-org to find files with tags
#+BEGIN_SRC emacs-lisp
  (use-package helm-org)
#+END_SRC
** Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :general
    (tyrant-def
      "gg" '(magit-status :wk "Magit")))
#+END_SRC
** Evil-Magit
#+BEGIN_SRC emacs-lisp
  (use-package evil-magit
    :after magit evil)
#+END_SRC
** Adding Treemacs
According from following blog i chosed following src
#+BEGIN_SRC emacs-lisp
  (use-package treemacs
    :ensure t
    :defer t
    :init
    (with-eval-after-load 'winum
      (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
    :config
    (progn
      (setq treemacs-collapse-dirs                 (if treemacs-python-executable 3 0)
            treemacs-deferred-git-apply-delay      0.5
            treemacs-directory-name-transformer    #'identity
            treemacs-display-in-side-window        t
            treemacs-eldoc-display                 t
            treemacs-file-event-delay              5000
            treemacs-file-extension-regex          treemacs-last-period-regex-value
            treemacs-file-follow-delay             0.2
            treemacs-file-name-transformer         #'identity
            treemacs-follow-after-init             t
            treemacs-git-command-pipe              ""
            treemacs-goto-tag-strategy             'refetch-index
            treemacs-indentation                   2
            treemacs-indentation-string            " "
            treemacs-is-never-other-window         nil
            treemacs-max-git-entries               5000
            treemacs-missing-project-action        'ask
            treemacs-move-forward-on-expand        nil
            treemacs-no-png-images                 nil
            treemacs-no-delete-other-windows       t
            treemacs-project-follow-cleanup        nil
            treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
            treemacs-position                      'left
            treemacs-recenter-distance             0.1
            treemacs-recenter-after-file-follow    nil
            treemacs-recenter-after-tag-follow     nil
            treemacs-recenter-after-project-jump   'always
            treemacs-recenter-after-project-expand 'on-distance
            treemacs-show-cursor                   nil
            treemacs-show-hidden-files             t
            treemacs-silent-filewatch              nil
            treemacs-silent-refresh                nil
            treemacs-sorting                       'alphabetic-asc
            treemacs-space-between-root-nodes      t
            treemacs-tag-follow-cleanup            t
            treemacs-tag-follow-delay              1.5
            treemacs-user-mode-line-format         nil
            treemacs-user-header-line-format       nil
            treemacs-width                         35
            treemacs-workspace-switch-cleanup      nil)

      ;; The default width and height of the icons is 22 pixels. If you are
      ;; using a Hi-DPI display, uncomment this to double the icon size.
      (treemacs-resize-icons 12)

      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t)
      (treemacs-fringe-indicator-mode t)
      (pcase (cons (not (null (executable-find "git")))
                   (not (null treemacs-python-executable)))
        (`(t . t)
         (treemacs-git-mode 'deferred))
        (`(t . _)
         (treemacs-git-mode 'simple))))
    :general
    (tyrant-def
      "tt" 'treemacs)
    :bind
    (:map global-map
          ("M-0"       . treemacs-select-window)
          ("C-x t 1"   . treemacs-delete-other-windows)
          ("C-x t t"   . treemacs)
          ("C-x t B"   . treemacs-bookmark)
          ("C-x t C-t" . treemacs-find-file)
          ("C-x t M-t" . treemacs-find-tag)))

  (use-package treemacs-evil
    :after treemacs evil
    :ensure t)

  (use-package treemacs-projectile
    :after treemacs projectile
    :ensure t)

  (use-package treemacs-icons-dired
    :after treemacs dired
    :ensure t
    :config (treemacs-icons-dired-mode))

  (use-package treemacs-magit
    :after treemacs magit
    :ensure t)
#+END_SRC
** Play youtube
#+BEGIN_SRC emacs-lisp
  (defun my-play-yt (url)
    (interactive "sUrl: ")
    (start-process "vlc" nil "cvlc" "--play-and-exit" url))
#+END_SRC
** Browse youtube
#+BEGIN_SRC emacs-lisp
  (use-package helm-youtube
    :init
    (setq browse-url-browser-function 'browse-url-generic)
    (setq browse-url-generic-program "vlc"))
    :general
    (tyrant-def
      "y" '(helm-youtube :wk "Browse yt"))
#+END_SRC
** Neotree
#+BEGIN_SRC emacs-lisp
  (use-package neotree
    :ensure t
    :general
      (tyrant-def
       "tn" 'neotree-toggle)
    :config
    (setq projectile-switch-project-action 'neotree-projectile-action)
    (add-hook 'neotree-mode-hook
      (lambda ()
        (define-key evil-normal-state-local-map (kbd "q") 'neotree-hide)
        (define-key evil-normal-state-local-map (kbd "I") 'neotree-hidden-file-toggle)
        (define-key evil-normal-state-local-map (kbd "z") 'neotree-stretch-toggle)
        (define-key evil-normal-state-local-map (kbd "R") 'neotree-refresh)
        (define-key evil-normal-state-local-map (kbd "m") 'neotree-rename-node)
        (define-key evil-normal-state-local-map (kbd "c") 'neotree-create-node)
        (define-key evil-normal-state-local-map (kbd "d") 'neotree-delete-node)

        (define-key evil-normal-state-local-map (kbd "s") 'neotree-enter-vertical-split)
        (define-key evil-normal-state-local-map (kbd "S") 'neotree-enter-horizontal-split)

        (define-key evil-normal-state-local-map (kbd "RET") 'neotree-enter))))
#+END_SRC
** Switching easily windows
#+BEGIN_SRC emacs-lisp
  (use-package winum
    :after general which-key
    :defer t
    :hook (after-init . winum-mode)
    :bind
    (:map global-map
          ("M-1" . winum-select-window-1)
          ("M-2" . winum-select-window-2)
          ("M-3" . winum-select-window-3)
          ("M-4" . winum-select-window-4))
    :general
      (tyrant-def
        "w1"  'winum-select-window-1
        "w2"  'winum-select-window-2
        "w3"  'winum-select-window-3
        "w4"  'winum-select-window-4))
#+END_SRC
** Haskell
Stuff for haskell development
#+BEGIN_SRC emacs-lisp
(use-package haskell-mode)
(require 'haskell-interactive-mode)
(require 'haskell-process)
(add-hook 'haskell-mode-hook 'interactive-haskell-mode)
#+END_SRC
** Parentheses
Rainbow-delimiters is a "rainbow parentheses"-like mode which highlights delimiters such as parentheses, brackets or braces according to their depth. Each successive level is highlighted in a different color. This makes it easy to spot matching delimiters, orient yourself in the code, and tell which statements are at a given depth.
#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))
#+END_SRC
** Projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :config
    (projectile-mode +1))
#+END_SRC
** YAS-Snippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :config
    (add-to-list 'load-path
                "~/.emacs.d/plugins/yasnippet")
    (yas-global-mode 1))
#+END_SRC
** Org-Mode
*** Package
#+BEGIN_SRC emacs-lisp
(use-package org
  :defer t
  :mode ("\\.org\\'" . org-mode)
  :ensure org-plus-contrib
  :init
    (defun my-org-mode-hooks ()
      (flyspell-mode)
      (outline-minor-mode)
      (electric-pair-mode))
   (add-hook 'org-mode-hook '(lambda ()
                             (visual-line-mode)
                             (org-indent-mode)))
   :general
     (despot-def org-mode-map
       "e"   'org-export-dispatch
       "t"   'org-hide-block-toggle
       "x"   'org-babel-execute-src-block
       "X"   'org-babel-execute-and-next
       "d"   'org-babel-remove-result
       "c"   'org-edit-special
	     "s"   'org-insert-structure-template))
#+END_SRC
*** Adjust Agenda path
#+BEGIN_SRC emacs-lisp
(setq org-agenda-files '("~/Org"))
#+END_SRC
** Evil
*** package
  #+BEGIN_SRC emacs-lisp
  (use-package evil
    :hook (after-init . evil-mode)
    :config (evil-set-initial-state 'shell-mode 'normal)
    (evil-set-initial-state 'doc-view-mode 'normal)
    (evil-set-initial-state 'package-menu-mode 'normal)
    (evil-set-initial-state 'biblio-selection-mode 'motion)
    (setq evil-insert-state-cursor '((bar . 5) "yellow")
      evil-normal-state-cursor '(box "purple"))
    (setq doc-view-continuous t)
    :general
    (tyrant-def
      "wh"  'evil-window-left
      "w1"  'winum-select-window-1
      "wl"  'evil-window-right
      "wj"  'evil-window-down
      "wk"  'evil-window-up
      "bN"  'evil-buffer-new
      "bn"  'evil-next-buffer
      "bp"  'evil-prev-buffer))
   #+END_SRC
   Behaves like VIM :
** Avy
  #+BEGIN_SRC emacs-lisp
    (use-package avy
    :general
     (tyrant-def
      "SPC" '(evil-avy-goto-char-timer :wk "avy-find")))
  #+END_SRC
** IMenu
  #+BEGIN_SRC emacs-lisp
  (use-package imenu-list
    :config
    (setq imenu-list-auto-resize t)
    (setq imenu-list-focus-after-activation t))
  #+END_SRC
** Hooks
*** No Trailing whitespaces
I never want whitespace at the end of lines. Remove it on save.
#+BEGIN_SRC emacs-lisp
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC
